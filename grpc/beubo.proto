syntax = "proto3";

option java_multiple_files = true;
option java_package = "beubo";
option java_outer_classname = "BeuboProto";
option go_package = "github.com/markustenghamn/beubo_grpc/grpc;grpc";

import "google/protobuf/any.proto";

// protoc -I grpc --go_out=plugins=grpc:grpc grpc/beubo.proto

package beubo;

// The Beubo service definition.
service BeuboGRPC {
    // Bidirectional plugin connection
    rpc Connect (stream Event) returns (stream Event) {}
    // For plugins that want to listen to incoming requests and perform action on the data
    rpc Requests (PluginMessage) returns (stream Request) {}
}

// Request is a basic representation of a http request
message Request {
    string url = 1;
    string method = 2;
    repeated Header headers = 3;
}

// Request is a basic representation of a http request
message Response {
    string content = 3;
}

// Header represents all the headers of a request
message Header {
    string key = 1;
    repeated string values = 2;
}

// The request message containing the user's name.
message PluginMessage {
    string name = 1;
    string identifier = 2;
    string host = 3;
    bool distributed = 4; // Should Beubo act as a loadbalancer with multiple plugin nodes?
    bool caching = 5; // Caching can be enabled so that Beubo does not repeat the same request multiple times but instead caches the response

    message Endpoint {
        string name = 1;
        int32 priority = 2;
    }

    repeated Endpoint endpoints = 6; // These are endpoints that Beubo or other plugins can call
}

// Event is the struct used for plugins to communicate with Beubo.
message Event {
    string key = 1;
    string data = 2;
    repeated google.protobuf.Any values = 3;
}